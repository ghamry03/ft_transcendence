version: "3"
services:
    mainapp:
        build: ./docker_srcs/main_app
        image: mainapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: mainapp
        restart: on-failure
        ports:
            - "8000:8000"
        networks:
            user_app_network:
                ipv4_address: $MAIN_IP
        volumes:
            - ./srcs/main_app/:/home/main_app
        depends_on:
            userapp:
                condition: service_started
            gameapp:
                condition: service_started
            postgres:
                condition: service_healthy
            tourapp:
                condition: service_started
            friendsapp:
                condition: service_started
        env_file:
            - ./.env

    gameapp:
        build: ./docker_srcs/game_app
        image: gameapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: gameapp
        restart: on-failure
        ports:
            - "8003:8003"
        volumes:
            - ./srcs/game_app/:/home/game_app
            - ./srcs/user_app/:/home/user_app
        depends_on:
            userapp:
                condition: service_healthy
            tourapp:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $GAME_IP
    
    tourapp:
        build: ./docker_srcs/tour_app
        image: tourapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: tourapp
        restart: on-failure
        ports:
            - "8004:8004"
        volumes:
            - ./srcs/tour_app/:/home/tour_app
            - ./srcs/user_app/:/home/user_app
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $TOUR_IP
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8004/tour/health"]
            interval: 5s
            timeout: 5s
            retries: 10
            
    userapp:
        build: ./docker_srcs/user_app
        image: userapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: userapp
        restart: on-failure
        ports:
            - "8001:8001"
        volumes:
            - ./srcs/user_app/:/home/user_app
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $USER_IP
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8001/api/health"]
            interval: 5s
            timeout: 5s
            retries: 10

    postgres:
        build: ./docker_srcs/postgres
        image: postgres
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: postgres
        restart: on-failure
        volumes:
            - ./srcs/postgres/data:/var/lib/postgresql/data
            # - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: pg_isready -U postgres
            interval: 5s
            timeout: 5s
            retries: 20
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $POSTGRES_IP

    friendsapp:
        build: ./docker_srcs/friends_app
        image: friendsapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: friendsapp
        restart: always
        ports:
            - "8002:8002"
        volumes:
            - ./srcs/friends_app/:/home/friends_app
            - ./srcs/user_app/:/home/user_app
        depends_on:
            postgres:
                condition: service_healthy
            userapp:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $FRIENDS_IP

# volumes:
#     user_app_data:
#         driver: local
#         driver_opts:
#             o: bind
#             type: none
#             device: ../srcs/user_app/

    # friends_app_data:
    #     driver: local
    #     driver_opts:
    #         o: bind
    #         type: none
    #         device: ../srcs/friends_app/

    # postgres_data:
    #     driver: local
    #     driver_opts:
    #         o: bind
    #         type: none
    #         device: ../srcs/postgres/data

networks:
    user_app_network:
        driver: bridge
        ipam:
            config:
                - subnet: 192.168.1.0/28
