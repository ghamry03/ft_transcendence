version: "3"
services:
    server:
        build: ./docker_srcs/server
        image: nginx
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: nginx
        restart: on-failure
        volumes:
            - ./srcs/main_app/static/:/vol/static
            - ./srcs/user_app/media/:/vol/media
        ports:
            - "80:80"
            - "443:443"
            - "8001:8001"
            - "8004:8004"
            - "8002:8002"
            - "8003:8003"
            - "8005:8005"
        depends_on:
            - mainapp
            - userapp
            - tourapp
            - gameapp
            - friendsapp
        networks:
            user_app_network:
                ipv4_address: $NGINX_IP
        environment:
            - DEBUG=0

    mainapp:
        build: 
          context: ./
          dockerfile: ./docker_srcs/main_app/Dockerfile.prod
        image: mainapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: mainapp
        restart: on-failure
        expose:
          - 8000
        depends_on:
            postgres:
                condition: service_healthy
            userapp:
                condition: service_started
            gameapp:
                condition: service_started
            tourapp:
                condition: service_started
            friendsapp:
                condition: service_started
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $MAIN_IP
        environment:
            - DEBUG=0
 
    gameapp:
        build: 
          context: ./
          dockerfile: ./docker_srcs/game_app/Dockerfile.prod
        image: gameapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: gameapp
        restart: on-failure
        expose:
          - 8003
        depends_on:
            userapp:
                condition: service_healthy
            tourapp:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $GAME_IP
        environment:
            - DEBUG=0

    tourapp:
        build: 
          context: ./
          dockerfile: ./docker_srcs/tour_app/Dockerfile.prod
        image: tourapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: tourapp
        restart: on-failure
        expose:
          - 8004
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $TOUR_IP
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8004/tour/health"]
            interval: 5s
            timeout: 5s
            retries: 10

    userapp:
        build:
          context: ./
          dockerfile: ./docker_srcs/user_app/Dockerfile.prod
        image: userapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: userapp
        restart: on-failure
        expose:
          - 8001
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env
        volumes:
            - ./srcs/user_app/media:/home/user_app/media
        networks:
            user_app_network:
                ipv4_address: $USER_IP
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8001/api/health"]
            interval: 5s
            timeout: 5s
            retries: 10
        environment:
            - DEBUG=0

    postgres:
        build: ./docker_srcs/postgres
        image: postgres
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: postgres
        restart: on-failure
        volumes:
            - ./srcs/postgres/data:/var/lib/postgresql/data
        healthcheck:
            test: pg_isready -U postgres
            interval: 15s
            timeout: 10s
            retries: 20
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $POSTGRES_IP
        environment:
            - DEBUG=0

    friendsapp:
        build:
          context: ./
          dockerfile: ./docker_srcs/friends_app/Dockerfile.prod
        image: friendsapp
        extra_hosts:
            - "$DB_HOST:$POSTGRES_IP"
        container_name: friendsapp
        restart: always
        expose:
          - 8002
        depends_on:
            postgres:
                condition: service_healthy
            userapp:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            user_app_network:
                ipv4_address: $FRIENDS_IP
        environment:
            - DEBUG=0

networks:
    user_app_network:
        driver: bridge
        ipam:
            config:
                - subnet: 192.168.1.0/28
