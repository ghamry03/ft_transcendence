version: "3"
services:
    server:
        build: ./server
        image: nginx
        container_name: nginx
        restart: on-failure
        volumes:
            - ./server/conf.d:/etc/nginx/conf.d
        ports:
            - "80:80"
        depends_on:
            - main_app
            - auth_app

    main_app:
        build: 
          context: ../
          dockerfile: ./docker_srcs/main_app/Dockerfile.prod
        image: main_app
        container_name: main_app
        restart: on-failure
        expose:
          - 8000
        command: gunicorn main_app.wsgi:application --bind 0.0.0.0:8000
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env

    auth_app:
        build: 
          context: ../
          dockerfile: ./docker_srcs/auth_app/Dockerfile.prod
        image: auth_app
        container_name: auth_app
        restart: on-failure
        expose:
          - 5000
        command: gunicorn auth_app.wsgi:application --bind 0.0.0.0:5000
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env

    postgres:
        build: ./postgres
        image: postgres
        container_name: postgres
        restart: on-failure
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: pg_isready -U postgres
            interval: 5s
            timeout: 5s
            retries: 5
        env_file:
            - ./.env

volumes:
    postgres_data:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: ../srcs/postgres/data
