version: "3"
services:
    server:
        build: ./server
        image: nginx
        container_name: nginx
        restart: on-failure
        volumes:
            - ./server/conf.d:/etc/nginx/conf.d
        ports:
            - "80:80"
        depends_on:
            - main_app
            - user_app
        networks:
            - user_app_network

    main_app:
        build: 
          context: ../
          dockerfile: ./docker_srcs/main_app/Dockerfile.prod
        image: main_app
        container_name: main_app
        restart: on-failure
        expose:
          - 8000
        command: gunicorn main_app.wsgi:application --bind 0.0.0.0:8000
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            - user_app_network
    
    game_app:
        build: 
          context: ../
          dockerfile: ./docker_srcs/game_app/Dockerfile.prod
        image: game_app
        container_name: game_app
        restart: on-failure
        expose:
          - 2000
        command: gunicorn game_app.wsgi:application --bind 0.0.0.0:2000
        depends_on:
            user_app:
                condition: service_started
        env_file:
            - ./.env
        networks:
            - user_app_network

    # auth_app:
    #     build: 
    #       context: ../
    #       dockerfile: ./docker_srcs/auth_app/Dockerfile.prod
    #     image: auth_app
    #     container_name: auth_app
    #     restart: on-failure
    #     expose:
    #       - 5000
    #     command: gunicorn auth_app.wsgi:application --bind 0.0.0.0:5000
    #     depends_on:
    #         postgres:
    #             condition: service_healthy
    #     env_file:
    #         - ./.env

    user_app:
        build:
          context: ../
          dockerfile: ./docker_srcs/user_app/Dockerfile.prod
        image: user_app
        container_name: user_app
        restart: on-failure
        expose:
          - 3000
        command: gunicorn user_app.wsgi:application --bind 0.0.0.0:3000
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - ./.env
        networks:
            - user_app_network

    postgres:
        build: ./postgres
        image: postgres
        container_name: postgres
        restart: on-failure
        volumes:
            - ../srcs/postgres/data:/var/lib/postgresql/data
            # - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: pg_isready -U postgres
            interval: 5s
            timeout: 5s
            retries: 5
        env_file:
            - ./.env
        networks:
            - user_app_network

# volumes:
#     postgres_data:
#         driver: local
#         driver_opts:
#             o: bind
#             type: none
#             device: ../srcs/postgres/data

networks:
    user_app_network:
        driver: bridge
